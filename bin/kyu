#!/usr/bin/env ruby

require 'tumblr_client'
require 'thor'
require 'highline/import'
require 'launchy'
require 'user_config'
require 'pathname'
require 'kyu'

class CLI < Thor

	option :consumer_key, :default => false, :aliases => "-k"
	option :consumer_secret, :default => false, :aliases => "-s"
	option :oauth_token, :default => false, :aliases => "-t"
	option :oauth_token_secret, :default => false, :aliases => "-S"
	desc "setup", "Sets up your authentication."
	def setup
		if not options[:consumer_key] or not options[:consumer_secret]
			puts "Visit https://www.tumblr.com/oauth/register and register an application."
			puts "For 'Default callback URL', enter /"
			Launchy.open('https://www.tumblr.com/oauth/register') if agree('Open link [yes/no]')
			options[:consumer_key] = ask('Enter OAuth Consumer Key: ') unless options[:consumer_key]
			options[:consumer_secret] = ask('Enter Secret Key: ') unless options[:consumer_secret]
		end
		if not options[:oauth_token_secret] or not options[:oauth_token]
			exploreAPI = "https://api.tumblr.com/console/auth?consumer_key=#{options[:consumer_key]}&consumer_secret=#{options[:consumer_secret]}"
			puts "Now, visit #{exploreAPI} and click the 'Allow' button."
			Launchy.open(exploreAPI) if agree('Open link [yes/no]')
			puts "After accepting, you should be redirected to https://api.tumblr.com/console/calls/user/info."
			puts "Click the Ruby tab."
			options[:oauth_token] = ask("Enter OAuth Token (in quotes after ':oauth_token => '): ") unless options[:oauth_token]
			options[:oauth_token_secret] = ask("Enter OAuth Token Secret (in quotes after ':oauth_token_secret => '): ") unless options[:oauth_token_secret]
		end
		Kyu.setup(options[:consumer_key], options[:consumer_secret], options[:oauth_token], options[:oauth_token_secret])
		puts "All set up!"
	end

	desc "test", "Tests your authentication."
	def test
		kyuc = UserConfig.new('.kyuc')
		client = Tumblr::Client.new({
			:consumer_key => kyuc['login.yaml']['consumer_key'],
			:consumer_secret => kyuc['login.yaml']['consumer_secret'],
			:oauth_token => kyuc['login.yaml']['oauth_token'],
			:oauth_token_secret => kyuc['login.yaml']['oauth_token_secret']
		})
		ci = client.info
		if ci.has_key?('user')
			puts "Successfully connected with #{ci['user']['name']}."
		else
			puts "#{ci['status']}: #{ci['msg']}."
		end
	end

	desc "init [where]", "Initializes folder as a queue repository."
	def init(where = ".")
		Kyu.init(where)
	end

	desc "delete [where]", "Delete the Kyu info."
	def delete(where = ".")
		Kyu.delete(where)
	end

	option :all, :default => false, :aliases => "-a", :type => :boolean
	desc "commit [what]", "Commit a file to be queued."
	def commit(what = false)
		what = Dir['*'].select { |f| !File.directory?(f) } if options[:all]
		Kyu.commit what
	end

	option :all, :default => false, :aliases => "-a", :type => :boolean
	desc "uncommit [what]", "Uncommit a file to be queued."
	def uncommit(what = false)
		what = Dir['*'].select { |f| !File.directory?(f) } if options[:all]
		Kyu.uncommit what
	end

	desc "list", "Lists all committed files"
	def list
		if Kyu.kyu?
			kyu = Kyu.config
			for file in kyu['details.yaml']['committed']
				puts file
			end
		end
	end

	option :tags, :type => :array, :aliases => "-t"
	desc "queue", "Enqueues items"
	def queue
		o = {}
		for opt in ["tags"]
			if options.has_key? opt
				o[opt.to_sym] = options[opt]
			end
		end
		Kyu.queue o
	end
end

CLI.start(ARGV)
